{
  "id": "ui/icon-button",
  "name": "Icon-button",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/icon-button.tsx",
      "content": "import * as React from \"react\";\nimport { keyframes, styled } from \"@pigment-css/react\";\nimport { LoaderCircleIcon } from \"lucide-react\";\n\nconst spinKeyFrames = keyframes({\n  from: { transform: \"rotate(0)\" },\n  to: { transform: \"rotate(360deg)\" },\n});\n\nconst IconButtonRoot = styled(\"button\", {\n  name: \"IconButtonRoot\",\n  slot: \"root\",\n})<\n  React.ComponentProps<\"button\"> & {\n    size: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n    variant: \"solid\" | \"outline\" | \"ghost\" | \"danger\";\n  }\n>({\n  alignItems: \"center\",\n  appearance: \"none\",\n  borderRadius: \"var(--borderRadius-md)\",\n  boxSizing: \"border-box\",\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  justifyContent: \"center\",\n  lineHeight: \"var(--lineHeight-none)\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  width: \"var(--size-fit)\",\n  \"&:focus-visible\": {\n    \"--ring-offset-width\": \"2px\",\n    \"--ring-offset-color\": \"hsl(var(--color-background))\",\n    \"--ring-offset-shadow\": \"0 0 0 var(--ring-offset-width) var(--ring-offset-color)\",\n    \"--ring-width\": \"2px\",\n    \"--ring-color\": \"hsl(var(--color-ring))\",\n    \"--ring-shadow\": \"0 0 0 calc(var(--ring-offset-width) + var(--ring-width)) var(--ring-color)\",\n    boxShadow: \"var(--ring-offset-shadow), var(--ring-shadow), var(--shadow, 0 0 #0000)\",\n    outline: \"none\",\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    opacity: 0.5,\n  },\n  \"& svg\": {\n    flexShrink: 0,\n    fontSize: \"1.1em\",\n    height: \"1.1em\",\n    width: \"1.1em\",\n  },\n  variants: [\n    {\n      props: { variant: \"solid\" },\n      style: {\n        backgroundColor: \"hsl(var(--color-primary))\",\n        border: \"none\",\n        color: \"hsl(var(--color-primaryForeground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-primary) / 80%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"hsl(var(--color-primary))\",\n        },\n      },\n    },\n    {\n      props: { variant: \"outline\" },\n      style: {\n        backgroundColor: \"transparent\",\n        border: \"1px solid hsl(var(--color-border))\",\n        color: \"hsl(var(--color-foreground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-primary) / 10%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"transparent\",\n        },\n      },\n    },\n    {\n      props: { variant: \"ghost\" },\n      style: {\n        backgroundColor: \"transparent\",\n        border: \"none\",\n        color: \"hsl(var(--color-foreground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-primary) / 10%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"transparent\",\n        },\n      },\n    },\n    {\n      props: { variant: \"danger\" },\n      style: {\n        backgroundColor: \"hsl(var(--color-danger))\",\n        border: \"none\",\n        color: \"hsl(var(--color-dangerForeground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-danger) / 80%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"hsl(var(--color-danger))\",\n        },\n      },\n    },\n    {\n      props: { size: \"xs\" },\n      style: {\n        fontSize: \"var(--fontSize-xs)\",\n        height: \"calc(var(--size-unit) * 7)\",\n        minWidth: \"calc(var(--size-unit) * 7)\",\n      },\n    },\n    {\n      props: { size: \"sm\" },\n      style: {\n        fontSize: \"var(--fontSize-sm)\",\n        height: \"calc(var(--size-unit) * 8)\",\n        minWidth: \"calc(var(--size-unit) * 8)\",\n      },\n    },\n    {\n      props: { size: \"md\" },\n      style: {\n        fontSize: \"var(--fontSize-sm)\",\n        height: \"calc(var(--size-unit) * 9)\",\n        minWidth: \"calc(var(--size-unit) * 9)\",\n      },\n    },\n    {\n      props: { size: \"lg\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 10)\",\n        minWidth: \"calc(var(--size-unit) * 10)\",\n      },\n    },\n    {\n      props: { size: \"xl\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 11)\",\n        minWidth: \"calc(var(--size-unit) * 11)\",\n      },\n    },\n  ],\n} as React.CSSProperties);\n\nconst IconButton = ({\n  children,\n  disabled,\n  isLoading = false,\n  size = \"md\",\n  variant = \"solid\",\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  /**\n   * Whether to show a loading spinner.\n   */\n  isLoading?: boolean;\n  /**\n   * The button's size.\n   */\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n  /**\n   * The button's style.\n   */\n  variant?: \"solid\" | \"outline\" | \"ghost\" | \"danger\";\n}) => {\n  const renderInner = () => {\n    if (isLoading) {\n      return (\n        <LoaderCircleIcon\n          style={{\n            animation: `${spinKeyFrames} 1s linear infinite`,\n          }}\n        />\n      );\n    }\n\n    return children;\n  };\n\n  return (\n    <IconButtonRoot variant={variant} size={size} disabled={disabled || isLoading} {...props}>\n      {renderInner()}\n    </IconButtonRoot>\n  );\n};\nIconButton.displayName = \"IconButton\";\n\nexport { IconButton };\n"
    }
  ]
}