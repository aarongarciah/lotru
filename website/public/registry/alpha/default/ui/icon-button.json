{
  "id": "ui/icon-button",
  "name": "Icon-button",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/icon-button.tsx",
      "content": "import * as React from \"react\";\nimport { keyframes, styled } from \"@pigment-css/react\";\nimport { LoaderCircleIcon } from \"lucide-react\";\n\nconst spinKeyFrames = keyframes({\n  from: { transform: \"rotate(0)\" },\n  to: { transform: \"rotate(360deg)\" },\n});\n\ninterface IconButtonRootProps extends React.ComponentPropsWithoutRef<\"button\"> {\n  size: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\n  variant: \"solid\" | \"outline\" | \"ghost\";\n}\n\nconst IconButtonRoot = styled(\"button\", {\n  name: \"IconButton\",\n  slot: \"root\",\n})<IconButtonRootProps>(({ theme }) => ({\n  alignItems: \"center\",\n  appearance: \"none\",\n  borderRadius: \"var(--borderRadius-md)\",\n  boxSizing: \"border-box\",\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  justifyContent: \"center\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  width: \"var(--size-fit)\",\n  \"&:focus-visible\": {\n    outline: \"2px solid hsl(var(--color-ring))\",\n    outlineOffset: \"2px\",\n  },\n  \"& svg\": {\n    flexShrink: 0,\n    fontSize: \"1.1em\",\n    height: \"1.1em\",\n    width: \"1.1em\",\n  },\n  variants: [\n    {\n      props: { variant: \"solid\" },\n      style: {\n        backgroundColor: \"hsl(var(--color-primary))\",\n        border: \"none\",\n        color: \"hsl(var(--color-primaryForeground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-primary) / 80%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"hsl(var(--color-primary))\",\n        },\n        \"&:disabled\": {\n          backgroundColor: \"hsl(var(--color-muted))\",\n          color: \"hsl(var(--color-mutedForeground))\",\n        },\n      },\n    },\n    {\n      props: { variant: \"outline\" },\n      style: {\n        backgroundColor: \"transparent\",\n        border: \"1px solid hsl(var(--color-border))\",\n        color: \"hsl(var(--color-foreground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-primary) / 10%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"transparent\",\n        },\n        \"&:disabled\": {\n          backgroundColor: \"hsl(var(--color-muted))\",\n          color: \"hsl(var(--color-mutedForeground))\",\n        },\n      },\n    },\n    {\n      props: { variant: \"ghost\" },\n      style: {\n        backgroundColor: \"transparent\",\n        border: \"none\",\n        color: \"hsl(var(--color-foreground))\",\n        transitionDuration: \"var(--duration-normal)\",\n        transitionProperty: \"background-color\",\n        transitionTimingFunction: \"var(--easing-default)\",\n        \"&:hover:not(:disabled)\": {\n          backgroundColor: \"hsl(var(--color-primary) / 10%)\",\n        },\n        \"&:active\": {\n          backgroundColor: \"transparent\",\n        },\n        \"&:disabled\": {\n          backgroundColor: \"transparent\",\n          color: \"hsl(var(--color-mutedForeground))\",\n        },\n      },\n    },\n    {\n      props: { size: \"xs\" },\n      style: {\n        fontSize: \"var(--fontSize-xs)\",\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 8)\",\n        minWidth: \"calc(var(--size-unit) * 8)\",\n      },\n    },\n    {\n      props: { size: \"sm\" },\n      style: {\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 9)\",\n        fontSize: \"var(--fontSize-sm)\",\n        minWidth: \"calc(var(--size-unit) * 9)\",\n      },\n    },\n    {\n      props: { size: \"md\" },\n      style: {\n        fontSize: \"var(--fontSize-sm)\",\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 10)\",\n        minWidth: \"calc(var(--size-unit) * 10)\",\n      },\n    },\n    {\n      props: { size: \"lg\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 11)\",\n        minWidth: \"calc(var(--size-unit) * 11)\",\n      },\n    },\n    {\n      props: { size: \"xl\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        gap: \"calc(var(--spacing-unit) * 2.5)\",\n        height: \"calc(var(--size-unit) * 12)\",\n        minWidth: \"calc(var(--size-unit) * 12)\",\n      },\n    },\n    {\n      props: { size: \"2xl\" },\n      style: {\n        fontSize: \"var(--fontSize-lg)\",\n        gap: \"calc(var(--spacing-unit) * 3)\",\n        height: \"calc(var(--size-unit) * 16)\",\n        minWidth: \"calc(var(--size-unit) * 16)\",\n      },\n    },\n  ],\n}));\n\ninterface IconButtonProps extends React.ComponentPropsWithoutRef<\"button\"> {\n  isLoading?: boolean;\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\n  variant?: \"solid\" | \"outline\" | \"ghost\";\n}\n\nconst IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(\n  (\n    {\n      children,\n      /**\n       * Whether the button is disabled.\n       */\n      disabled,\n      /**\n       * Whether to show a loading spinner.\n       */\n      isLoading = false,\n      /**\n       * The button's size.\n       */\n      size = \"md\",\n      /**\n       * The button's style.\n       */\n      variant = \"solid\",\n      ...props\n    }: IconButtonProps,\n    ref\n  ) => {\n    const renderInner = () => {\n      if (isLoading) {\n        return (\n          <LoaderCircleIcon\n            style={{\n              animation: `${spinKeyFrames} 1s linear infinite`,\n            }}\n          />\n        );\n      }\n\n      return children;\n    };\n\n    return (\n      <IconButtonRoot ref={ref} variant={variant} size={size} disabled={disabled || isLoading} {...props}>\n        {renderInner()}\n      </IconButtonRoot>\n    );\n  }\n);\nIconButton.displayName = \"IconButton\";\n\nexport { IconButton };\n"
    }
  ]
}