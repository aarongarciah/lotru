{
  "id": "ui/prompt",
  "name": "Prompt",
  "dependencies": [
    "@base_ui/react"
  ],
  "files": [
    {
      "path": "ui/prompt.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as Primitives from \"@base_ui/react/AlertDialog\";\nimport { styled } from \"@pigment-css/react\";\n\nimport { Button } from \"@/components/ui/button\";\n\ntype PromptVariant = \"danger\" | \"confirmation\";\n\nconst PromptContext = React.createContext<{ variant: PromptVariant }>({\n  variant: \"danger\",\n});\n\nconst usePromptContext = () => {\n  const context = React.useContext(PromptContext);\n  if (!context) {\n    throw new Error(\"usePromptContext must be used within a PromptProvider\");\n  }\n  return context;\n};\n\ntype PromptProviderProps = React.PropsWithChildren<{\n  variant: PromptVariant;\n}>;\n\nconst PromptProvider = ({ variant, children }: PromptProviderProps) => {\n  return <PromptContext.Provider value={{ variant }}>{children}</PromptContext.Provider>;\n};\n\ninterface PromptProps {\n  children: React.ReactNode;\n  variant?: PromptVariant;\n}\n\nconst Prompt: React.FC<PromptProps> = ({\n  /**\n   * The variant of the prompt.\n   */\n  variant = \"danger\",\n  ...props\n}) => {\n  return (\n    <PromptProvider variant={variant}>\n      <Primitives.Root {...props} />\n    </PromptProvider>\n  );\n};\nPrompt.displayName = \"Prompt\";\n\nconst PromptTrigger = Primitives.Trigger;\n\nconst PromptOverlay = styled(Primitives.Backdrop, {\n  name: \"PromptOverlay\",\n  slot: \"backdrop\",\n})({\n  backgroundColor: \"hsl(var(--color-backgroundOverlay))\",\n  position: \"fixed\",\n  inset: 0,\n  zIndex: \"var(--zIndex-overlay)\",\n});\n\nconst PromptContent = styled(Primitives.Popup, {\n  name: \"PromptContent\",\n  slot: \"content\",\n})({\n  backgroundColor: \"hsl(var(--color-background))\",\n  borderColor: \"hsl(var(--color-border))\",\nborderStyle: \"solid\",\nborderWidth: \"1px\",\n  borderRadius: \"var(--borderRadius-md)\",\n  boxShadow: \"var(--shadow-xl)\",\n  position: \"fixed\",\n  top: \"50%\",\n  left: \"50%\",\n  fontFamily: \"var(--font-sans)\",\n  transform: \"translate(-50%, -50%)\",\n  zIndex: \"var(--zIndex-modal)\",\n});\n\nconst PromptHeader = styled(\"div\", {\n  name: \"PromptHeader\",\n  slot: \"header\",\n})({\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"var(--spacing-unit)\",\n  paddingTop: \"calc(var(--spacing-unit) * 6)\",\n  paddingLeft: \"calc(var(--spacing-unit) * 6)\",\n  paddingRight: \"calc(var(--spacing-unit) * 6)\",\n});\n\nconst PromptFooter = styled(\"div\", {\n  name: \"PromptFooter\",\n  slot: \"footer\",\n})({\n  display: \"flex\",\n  justifyContent: \"flex-end\",\n  gap: \"calc(var(--spacing-unit) * 2)\",\n  padding: \"calc(var(--spacing-unit) * 6)\",\n});\n\nconst PromptTitle = styled(Primitives.Title)({\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-lg)\",\n  lineHeight: \"var(--lineHeight-normal)\",\n  fontWeight: \"var(--fontWeight-semibold)\",\n  margin: 0,\n});\n\nconst PromptDescription = styled(Primitives.Description)({\n  color: \"hsl(var(--color-foregroundSubtle))\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-md)\",\n  lineHeight: \"var(--lineHeight-tight)\",\n  margin: 0,\n});\n\ninterface PromptActionProps {\n  children: React.ReactNode;\n  type?: \"button\" | \"submit\" | \"reset\";\n}\n\nconst PromptAction = React.forwardRef<HTMLButtonElement, PromptActionProps>(function PromptAction(\n  { children, type, ...props },\n  ref\n) {\n  const _ = usePromptContext();\n\n  return (\n    <Primitives.Close\n      ref={ref}\n      render={\n        <Button type={type}>\n          {children}\n        </Button>\n      }\n      {...props}\n    />\n  );\n});\n\ninterface PromptCancelProps {\n  children: React.ReactNode;\n  type?: \"button\" | \"submit\" | \"reset\";\n}\n\nconst PromptCancel = React.forwardRef<HTMLButtonElement, PromptCancelProps>(function PromptCancel(\n  { children, ...props },\n  ref\n) {\n  return <Primitives.Close ref={ref} render={<Button variant=\"ghost\">{children}</Button>} {...props} />;\n});\n\nexport {\n  Prompt,\n  PromptTrigger,\n  PromptOverlay,\n  PromptContent,\n  PromptHeader,\n  PromptFooter,\n  PromptTitle,\n  PromptDescription,\n  PromptAction,\n  PromptCancel,\n};\n\nexport type { PromptProps, PromptActionProps, PromptCancelProps };\n"
    }
  ]
}