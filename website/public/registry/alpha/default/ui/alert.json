{
  "id": "ui/alert",
  "name": "Alert",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "ui/icon-button"
  ],
  "files": [
    {
      "path": "ui/alert.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { css, styled } from \"@pigment-css/react\";\nimport { XIcon } from \"lucide-react\";\n\nimport { IconButton } from \"@/components/ui/icon-button\";\n\nconst AlertRoot = styled(\"div\", {\n  name: \"AlertRoot\",\n  slot: \"root\",\n})({\n  alignItems: \"flex-start\",\n  borderColor: \"hsl(var(--color-border))\",\n  borderStyle: \"solid\",\n  borderWidth: \"1px\",\n  borderRadius: \"var(--borderRadius-lg)\",\n  boxSizing: \"border-box\",\n  display: \"flex\",\n  gap: \"calc(var(--spacing-unit) * 3)\",\n  padding: \"calc(var(--spacing-unit) * 4)\",\n  width: \"var(--size-full)\",\n});\n\ninterface AlertProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  dismissible?: boolean;\n  variant?: \"error\" | \"success\" | \"warning\" | \"info\";\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  {\n    children,\n    /**\n     * Whether the alert is dismissible\n     */\n    dismissible = false,\n    /**\n     * The variant of the alert\n     */\n    variant = \"info\",\n    ...props\n  }: AlertProps,\n  ref\n) {\n  const [dismissed, setDismissed] = React.useState<boolean>(false);\n\n  const handleDismiss = (): void => {\n    setDismissed(true);\n  };\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <AlertRoot ref={ref} {...props}>\n      {children}\n      {dismissible && (\n        <IconButton size=\"xs\" variant=\"ghost\" onClick={handleDismiss}>\n          <XIcon\n            className={css({\n              color: \"hsl(var(--color-foregroundMuted))\",\n            })}\n          />\n        </IconButton>\n      )}\n    </AlertRoot>\n  );\n});\n\nconst AlertIcon = styled(\"div\", {\n  name: \"AlertIcon\",\n  slot: \"icon\",\n})({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  fontSize: \"var(--fontSize-lg)\",\n  \"& svg\": {\n    color: \"hsl(var(--color-foreground))\",\n    flexShrink: 0,\n    fontSize: \"1.1em\",\n    height: \"1.1em\",\n    width: \"1.1em\",\n  },\n});\n\nconst AlertContent = styled(\"div\", {\n  name: \"AlertContent\",\n  slot: \"content\",\n})({\n  flexGrow: 1,\n});\n\nconst AlertTitle = styled(\"p\", {\n  name: \"AlertTitle\",\n  slot: \"title\",\n})({\n  color: \"hsl(var(--color-foreground))\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-md)\",\n  lineHeight: \"var(--lineHeight-normal)\",\n  fontWeight: \"var(--fontWeight-medium)\",\n  margin: 0,\n});\n\nconst AlertDescription = styled(\"p\", {\n  name: \"AlertTitle\",\n  slot: \"title\",\n})({\n  color: \"hsl(var(--color-foregroundSubtle))\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-sm)\",\n  lineHeight: \"var(--lineHeight-normal)\",\n  margin: 0,\n});\n\nexport { Alert, AlertIcon, AlertContent, AlertTitle, AlertDescription };\n\nexport type { AlertProps };\n"
    }
  ]
}