{
  "id": "ui/alert",
  "name": "Alert",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "ui/icon-button"
  ],
  "files": [
    {
      "path": "ui/alert.tsx",
      "content": "import * as React from \"react\";\nimport { css, styled } from \"@pigment-css/react\";\nimport { XIcon } from \"lucide-react\";\n\nimport { IconButton } from \"@/components/ui/icon-button\";\n\nconst AlertRoot = styled(\"div\", {\n  name: \"AlertRoot\",\n  slot: \"root\",\n})<React.ComponentProps<\"div\">>({\n  alignItems: \"flex-start\",\n  border: \"1px solid hsl(var(--color-border))\",\n  borderRadius: \"var(--borderRadius-lg)\",\n  boxSizing: \"border-box\",\n  display: \"flex\",\n  gap: \"calc(var(--spacing-unit) * 3)\",\n  padding: \"calc(var(--spacing-unit) * 4)\",\n  width: \"var(--size-full)\",\n});\n\nconst AlertIcon = styled(\"div\", {\n  name: \"AlertIcon\",\n  slot: \"icon\",\n})<React.ComponentProps<\"div\">>({\n  alignItems: \"center\",\n  display: \"flex\",\n  fontSize: \"var(--fontSize-lg)\",\n  justifyContent: \"center\",\n  \"& svg\": {\n    flexShrink: 0,\n    fontSize: \"1em\",\n    height: \"1em\",\n    width: \"1em\",\n  },\n});\n\nconst AlertContent = styled(\"div\", {\n  name: \"AlertContent\",\n  slot: \"content\",\n})<React.ComponentProps<\"div\">>({\n  display: \"grid\",\n  gap: \"var(--spacing-unit)\",\n  flexGrow: 1,\n});\n\nconst AlertTitle = styled(\"p\", {\n  name: \"AlertTitle\",\n  slot: \"title\",\n})<React.ComponentProps<\"p\">>({\n  fontWeight: \"var(--fontWeight-medium)\",\n  lineHeight: \"var(--lineHeight-none)\",\n  marginBlock: 0,\n});\n\nconst AlertDescription = styled(\"p\", {\n  name: \"AlertTitle\",\n  slot: \"title\",\n})<React.ComponentProps<\"p\">>({\n  color: \"hsl(var(--color-mutedForeground))\",\n  fontSize: \"var(--fontSize-sm)\",\n  marginBlock: 0,\n});\n\nconst Alert = ({\n  children,\n  /**\n   * Whether the alert is dismissible\n   */\n  dismissible = false,\n  /**\n   * The callback called on dismiss click\n   */\n  onDismiss,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  dismissible?: boolean;\n  onDismiss?: () => void;\n}) => (\n  <AlertRoot {...props}>\n    {children}\n    {dismissible && (\n      <IconButton size=\"xs\" variant=\"ghost\" onClick={onDismiss}>\n        <XIcon\n          className={css({\n            color: \"hsl(var(--color-mutedForeground))\",\n          })}\n        />\n      </IconButton>\n    )}\n  </AlertRoot>\n);\nAlert.displayName = \"Alert\";\n\nexport { Alert, AlertIcon, AlertContent, AlertTitle, AlertDescription };\n"
    }
  ]
}