{
  "id": "ui/select",
  "name": "Select",
  "dependencies": [
    "@base_ui/react"
  ],
  "files": [
    {
      "path": "ui/select.tsx",
      "content": "import * as React from \"react\";\nimport { styled } from \"@pigment-css/react\";\n\ninterface SelectRootProps extends Omit<React.ComponentPropsWithoutRef<\"select\">, \"size\"> {\n  size_: \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\nconst SelectRoot = styled(\"select\", {\n  name: \"SelectRoot\",\n  slot: \"root\",\n})<SelectRootProps>({\n  appearance: \"none\",\n  background: \"none\",\n  borderColor: \"hsl(var(--color-border))\",\nborderStyle: \"solid\",\nborderWidth: \"1px\",\n  borderRadius: \"var(--borderRadius-sm)\",\n  boxSizing: \"border-box\",\n  color: \"hsl(var(--color-foreground))\",\n  outline: \"none\",\n  position: \"relative\",\n  transitionDuration: \"var(--duration-normal)\",\n  transitionProperty: \"border-color, box-shadow\",\n  transitionTimingFunction: \"var(--easing-default)\",\n  width: \"var(--size-full)\",\n  \"&:disabled\": {\n    backgroundColor: \"hsl(var(--color-input-backgroundDisabled))\",\n    borderColor: \"hsl(var(--color-borderDisabled))\",\n    color: \"hsl(var(--color-foregroundDisabled))\",\n    cursor: \"not-allowed\",\n    \"&::placeholder\": {\n      color: \"hsl(var(--color-foregroundDisabled))\",\n    },\n  },\n  \"&:focus-visible\": {\n    borderColor: \"hsl(var(--color-borderStrong))\",\n    '&[data-field=\"invalid\"]': {\n      borderColor: \"hsl(var(--color-borderStrong))\",\n    },\n  },\n  '&[data-field=\"invalid\"]': {},\n  \"&::placeholder\": {\n    color: \"hsl(var(--color-foregroundMuted))\",\n  },\n  variants: [\n    {\n      props: { size_: \"sm\" },\n      style: {\n        fontSize: \"var(--fontSize-sm)\",\n        height: \"calc(var(--size-unit) * 9)\",\n        minWidth: \"calc(var(--size-unit) * 9)\",\n        paddingInline: \"calc(var(--spacing-unit) * 2.5)\",\n      },\n    },\n    {\n      props: { size_: \"md\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 10)\",\n        minWidth: \"calc(var(--size-unit) * 10)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3)\",\n      },\n    },\n    {\n      props: { size_: \"lg\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        height: \"calc(var(--size-unit) * 11)\",\n        minWidth: \"calc(var(--size-unit) * 11)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3.5)\",\n      },\n    },\n    {\n      props: { size_: \"xl\" },\n      style: {\n        fontSize: \"var(--fontSize-lg)\",\n        height: \"calc(var(--size-unit) * 12)\",\n        minWidth: \"calc(var(--size-unit) * 12)\",\n        paddingInline: \"calc(var(--spacing-unit) * 4)\",\n      },\n    },\n  ],\n});\n\ninterface SelectProps extends Omit<React.ComponentPropsWithoutRef<\"select\">, \"size\"> {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\nconst Select = React.forwardRef<HTMLSelectElement, SelectProps>(({ size = \"md\", ...props }, ref) => {\n  return <SelectRoot ref={ref} size_={size} {...props} />;\n});\n\nexport { Select };\n"
    }
  ]
}