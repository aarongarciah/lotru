{
  "id": "ui/drawer",
  "name": "Drawer",
  "dependencies": [
    "@base_ui/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "ui/icon-button"
  ],
  "files": [
    {
      "path": "ui/drawer.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as Primitives from \"@base_ui/react/Dialog\";\nimport { styled } from \"@pigment-css/react\";\nimport { XIcon } from \"lucide-react\";\n\nimport { IconButton } from \"@/components/ui/icon-button\";\n\nconst Drawer = (props: React.ComponentPropsWithoutRef<typeof Primitives.Root>) => {\n  return <Primitives.Root {...props} />;\n};\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = React.forwardRef<\n  React.ElementRef<typeof Primitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof Primitives.Trigger>\n>(({ ...props }, ref) => {\n  return <Primitives.Trigger ref={ref} {...props} />;\n});\nDrawerTrigger.displayName = \"DrawerTrigger\";\n\nconst DrawerClose = React.forwardRef<\n  React.ElementRef<typeof Primitives.Close>,\n  React.ComponentPropsWithoutRef<typeof Primitives.Close>\n>(({ ...props }, ref) => {\n  return <Primitives.Close ref={ref} {...props} />;\n});\nDrawerClose.displayName = \"DrawerClose\";\n\nconst DrawerOverlay = styled(Primitives.Backdrop, {\n  name: \"DrawerOverlay\",\n  slot: \"overlay\",\n})({\n  backgroundColor: \"hsl(var(--color-overlay))\",\n  inset: 0,\n  position: \"fixed\",\n  zIndex: \"var(--zIndex-overlay)\",\n});\n\ninterface DrawerContentProps extends React.ComponentPropsWithoutRef<typeof Primitives.Popup> {\n  side: \"left\" | \"right\";\n}\n\nconst DrawerContent = styled(Primitives.Popup, {\n  name: \"DialogContent\",\n  slot: \"content\",\n})<DrawerContentProps>({\n  backgroundColor: \"hsl(var(--color-surface))\",\n  borderColor: \"hsl(var(--color-border))\",\n  borderStyle: \"solid\",\n  borderWidth: \"1px\",\n  bottom: 0,\n  boxShadow: \"var(--shadow-xl)\",\n  display: \"flex\",\n  flex: \"1 1 auto\",\n  flexDirection: \"column\",\n  maxWidth: \"calc(var(--drawer-max-width, 560px) - calc(var(--spacing-unit) * 2))\",\n  opacity: 0,\n  outline: \"none\",\n  position: \"fixed\",\n  top: 0,\n  transitionDuration: \"var(--duration-normal)\",\n  transitionProperty: \"transform, opacity\",\n  transitionTimingFunction: \"var(--easing-default)\",\n  width: \"var(--size-full)\",\n  zIndex: \"var(--zIndex-modal)\",\n  \"&[data-state='open']\": {\n    opacity: 1,\n    transform: \"translateX(0)\",\n  },\n  \"&[data-entering]\": {\n    opacity: 0,\n  },\n  variants: [\n    {\n      props: { side: \"left\" },\n      style: {\n        left: 0,\n        transform: \"translateX(-100%)\",\n        \"&[data-entering]\": {\n          transform: \"translateX(-100%)\",\n        },\n      },\n    },\n    {\n      props: { side: \"right\" },\n      style: {\n        right: 0,\n        transform: \"translateX(100%)\",\n        \"&[data-entering]\": {\n          transform: \"translateX(100%)\",\n        },\n      },\n    },\n  ],\n});\n\nconst DrawerHeaderRoot = styled(\"div\", {\n  name: \"DrawerHeader\",\n  slot: \"header\",\n})({\n  alignItems: \"center\",\n  borderBottom: \"1px solid hsl(var(--color-border))\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  padding: \"calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 5)\",\n});\n\nconst DrawerHeader = React.forwardRef<\n  React.ElementRef<typeof DrawerHeaderRoot>,\n  React.ComponentPropsWithoutRef<typeof DrawerHeaderRoot>\n>(({ children, className, ...props }, ref) => {\n  return (\n    <DrawerHeaderRoot ref={ref} className={className} {...props}>\n      {children}\n      <Primitives.Close\n        render={\n          <IconButton variant=\"ghost\">\n            <XIcon />\n          </IconButton>\n        }\n      />\n    </DrawerHeaderRoot>\n  );\n});\n\nconst DrawerBody = styled(\"div\", {\n  name: \"DrawerBody\",\n  slot: \"body\",\n})({\n  flex: \"1 1 auto\",\n  overflow: \"auto\",\n  padding: \"calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 5)\",\n});\n\nconst DrawerTitle = styled(Primitives.Title)({\n  color: \"hsl(var(--color-foreground))\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-lg)\",\n  lineHeight: \"var(--lineHeight-normal)\",\n  fontWeight: \"var(--fontWeight-semibold)\",\n  margin: 0,\n});\n\nconst DrawerFooter = styled(\"div\", {\n  name: \"DrawerFooter\",\n  slot: \"footer\",\n})({\n  borderTop: \"1px solid hsl(var(--color-border))\",\n  display: \"flex\",\n  justifyContent: \"flex-end\",\n  padding: \"calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 5)\",\n});\n\nexport {\n  Drawer,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  DrawerTitle,\n};\n"
    }
  ]
}