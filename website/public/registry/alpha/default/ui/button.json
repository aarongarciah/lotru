{
  "id": "ui/button",
  "name": "Button",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { keyframes, styled } from \"@pigment-css/react\";\nimport { LoaderCircleIcon } from \"lucide-react\";\n\nconst spinKeyFrames = keyframes({\n  from: { transform: \"rotate(0)\" },\n  to: { transform: \"rotate(360deg)\" },\n});\n\ninterface ButtonRootProps extends React.ComponentPropsWithoutRef<\"button\"> {\n  size: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\n  variant: \"solid\" | \"outline\" | \"ghost\";\n}\n\nconst ButtonRoot = styled(\"button\", {\n  name: \"ButtonRoot\",\n  slot: \"root\",\n})<ButtonRootProps>(({ theme }) => ({\n  alignItems: \"center\",\n  appearance: \"none\",\n  borderRadius: \"var(--borderRadius-sm)\",\n  boxSizing: \"border-box\",\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  flexShrink: 0,\n  justifyContent: \"center\",\n  outline: \"none\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  width: \"var(--size-fit)\",\n  \"& svg\": {\n    flexShrink: 0,\n    fontSize: \"1.1em\",\n    height: \"1.1em\",\n    width: \"1.1em\",\n  },\n  variants: [\n    {\n      props: { variant: \"solid\" },\n      style: {\n        backgroundColor: \"hsl(var(--color-foreground))\",\n        border: \"none\",\n        color: \"hsl(var(--color-background))\",\n        ...theme.applyStyles(\"dark\", {\n          backgroundColor: \"hsl(220 9% 94%)\",\n        }),\n        \"&:hover\": {\n          backgroundColor: \"hsl(240 5% 25%)\",\n          ...theme.applyStyles(\"dark\", {\n            backgroundColor: \"hsl(0 0% 100%)\",\n          }),\n        },\n        \"&:active\": {\n          backgroundColor: \"hsl(240 5% 35%)\",\n          ...theme.applyStyles(\"dark\", {\n            backgroundColor: \"hsl(220 9% 94%)\",\n          }),\n        },\n        \"&:disabled\": {\n          backgroundColor: \"hsl(var(--color-backgroundDisabled))\",\n          color: \"hsl(var(--color-foregroundDisabled))\",\n        },\n      },\n    },\n    {\n      props: { variant: \"outline\" },\n      style: {\n        backgroundColor: \"hsl(0 0% 100%)\",\n        borderColor: \"hsl(var(--color-border))\",\n        borderStyle: \"solid\",\n        borderWidth: \"1px\",\n        color: \"hsl(var(--color-foreground))\",\n        ...theme.applyStyles(\"dark\", {\n          backgroundColor: \"hsl(230 7% 16%)\",\n        }),\n        \"&:hover\": {\n          backgroundColor: \"hsl(240 5% 96%)\",\n          ...theme.applyStyles(\"dark\", {\n            backgroundColor: \"hsl(223 6% 22%)\",\n          }),\n        },\n        \"&:active\": {\n          backgroundColor: \"hsl(240 5% 90%)\",\n          ...theme.applyStyles(\"dark\", {\n            backgroundColor: \"hsl(218 6% 25%)\",\n          }),\n        },\n        \"&:disabled\": {\n          backgroundColor: \"hsl(var(--color-backgroundDisabled))\",\n          color: \"hsl(var(--color-foregroundDisabled))\",\n        },\n      },\n    },\n    {\n      props: { variant: \"ghost\" },\n      style: {\n        backgroundColor: \"transparent\",\n        border: \"none\",\n        color: \"hsl(var(--color-foreground))\",\n        \"&:hover\": {\n          backgroundColor: \"hsl(240 5% 96%)\",\n          ...theme.applyStyles(\"dark\", {\n            backgroundColor: \"hsl(240 5% 15%)\",\n          }),\n        },\n        \"&:active\": {\n          backgroundColor: \"hsl(240 5% 90%)\",\n          ...theme.applyStyles(\"dark\", {\n            backgroundColor: \"hsl(240 5% 20%)\",\n          }),\n        },\n        \"&:focus-visible\": {\n          backgroundColor: \"hsl(240 5% 96%)\",\n        },\n        \"&:disabled\": {\n          backgroundColor: \"transparent\",\n        },\n      },\n    },\n    {\n      props: { size: \"xs\" },\n      style: {\n        fontSize: \"var(--fontSize-xs)\",\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 8)\",\n        lineHeight: \"var(--lineHeight-tighter)\",\n        minWidth: \"calc(var(--size-unit) * 8)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3)\",\n      },\n    },\n    {\n      props: { size: \"sm\" },\n      style: {\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 9)\",\n        fontSize: \"var(--fontSize-sm)\",\n        lineHeight: \"var(--lineHeight-tight)\",\n        minWidth: \"calc(var(--size-unit) * 9)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3.5)\",\n      },\n    },\n    {\n      props: { size: \"md\" },\n      style: {\n        fontSize: \"var(--fontSize-sm)\",\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 10)\",\n        lineHeight: \"var(--lineHeight-tight)\",\n        minWidth: \"calc(var(--size-unit) * 10)\",\n        paddingInline: \"calc(var(--spacing-unit) * 4)\",\n      },\n    },\n    {\n      props: { size: \"lg\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        gap: \"calc(var(--spacing-unit) * 2)\",\n        height: \"calc(var(--size-unit) * 11)\",\n        lineHeight: \"var(--lineHeight-normal)\",\n        minWidth: \"calc(var(--size-unit) * 11)\",\n        paddingInline: \"calc(var(--spacing-unit) * 4.5)\",\n      },\n    },\n    {\n      props: { size: \"xl\" },\n      style: {\n        fontSize: \"var(--fontSize-md)\",\n        gap: \"calc(var(--spacing-unit) * 2.5)\",\n        height: \"calc(var(--size-unit) * 12)\",\n        lineHeight: \"var(--lineHeight-normal)\",\n        minWidth: \"calc(var(--size-unit) * 12)\",\n        paddingInline: \"calc(var(--spacing-unit) * 5)\",\n      },\n    },\n    {\n      props: { size: \"2xl\" },\n      style: {\n        fontSize: \"var(--fontSize-lg)\",\n        gap: \"calc(var(--spacing-unit) * 3)\",\n        height: \"calc(var(--size-unit) * 16)\",\n        lineHeight: \"var(--lineHeight-relaxed)\",\n        minWidth: \"calc(var(--size-unit) * 16)\",\n        paddingInline: \"calc(var(--spacing-unit) * 7)\",\n      },\n    },\n  ],\n}));\n\ninterface ButtonProps extends React.ComponentPropsWithoutRef<\"button\"> {\n  isLoading?: boolean;\n  loadingText?: React.ReactNode;\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\n  variant?: \"solid\" | \"outline\" | \"ghost\";\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      children,\n      /**\n       * Whether the button is disabled.\n       */\n      disabled,\n      /**\n       * Whether to show a loading spinner.\n       */\n      isLoading = false,\n      /**\n       * The text to show when the button is loading.\n       */\n      loadingText,\n      /**\n       * The button's size.\n       */\n      size = \"md\",\n      /**\n       * The button's style.\n       */\n      variant = \"solid\",\n      ...props\n    }: ButtonProps,\n    ref\n  ) => {\n    const renderInner = () => {\n      if (isLoading) {\n        return (\n          <React.Fragment>\n            <LoaderCircleIcon\n              style={{\n                animation: `${spinKeyFrames} 1s linear infinite`,\n              }}\n            />\n            {loadingText}\n          </React.Fragment>\n        );\n      }\n\n      return children;\n    };\n\n    return (\n      <ButtonRoot ref={ref} disabled={disabled || isLoading} size={size} variant={variant} {...props}>\n        {renderInner()}\n      </ButtonRoot>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button };\n"
    }
  ]
}