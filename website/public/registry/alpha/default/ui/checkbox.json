{
  "id": "ui/checkbox",
  "name": "Checkbox",
  "dependencies": [
    "@base_ui/react"
  ],
  "files": [
    {
      "path": "ui/checkbox.tsx",
      "content": "import * as React from \"react\";\nimport * as Primitives from \"@base_ui/react/Checkbox\";\nimport { styled } from \"@pigment-css/react\";\nimport { CheckIcon, MinusIcon } from \"lucide-react\";\n\nconst CheckboxRoot = styled(Primitives.Root, {\n  name: \"CheckboxRoot\",\n  slot: \"root\",\n})({\n  alignItems: \"center\",\n  background: \"transparent\",\n  border: \"none\",\n  cursor: \"pointer\",\n  boxSizing: \"border-box\",\n  display: \"inline-flex\",\n  flexShrink: 0,\n  height: \"1.25rem\",\n  justifyContent: \"center\",\n  margin: 0,\n  outline: \"none\",\n  padding: 0,\n  width: \"1.25rem\",\n});\n\nconst CheckboxIndicator = styled(Primitives.Indicator, {\n  name: \"CheckboxIndicator\",\n  slot: \"indicator\",\n})({\n  alignItems: \"center\",\n  backgroundColor: \"hsl(var(--color-background))\",\n  borderColor: \"hsl(var(--color-border))\",\nborderStyle: \"solid\",\nborderWidth: \"1px\",\n  borderRadius: \"4px\",\n  color: \"hsl(var(--color-foregroundOnColor))\",\n  display: \"flex\",\n  height: \"14px\",\n  justifyContent: \"center\",\n  transition: \"background-color 200ms, border-color 200ms\",\n  width: \"14px\",\n  \"&:hover\": {\n    backgroundColor: \"hsl(var(--color-backgroundHover))\",\n    borderColor: \"hsl(var(--color-borderStrong))\",\n  },\n  \"&:focus-visible\": {\n    boxShadow: \"0 0 0 3px var(--color-borderInteractive)\",\n  },\n  \"&[data-disabled]\": {\n    cursor: \"not-allowed\",\n    opacity: 0.4,\n  },\n  \"&[data-state='checked']\": {\n    backgroundColor: \"hsl(var(--color-backgroundInteractive))\",\n  },\n  \"&[data-state='checked']:hover\": {\n    backgroundColor: \"hsl(var(--color-backgroundInteractiveHover))\",\n  },\n  '&[data-state=\"unchecked\"] svg': {\n    display: \"none\",\n  },\n});\n\ninterface CheckboxProps extends React.ComponentPropsWithoutRef<typeof CheckboxRoot> {\n  intermediate?: boolean;\n}\n\nconst Checkbox = React.forwardRef<React.ElementRef<typeof CheckboxRoot>, CheckboxProps>(\n  (\n    {\n      /**\n       * Whether the checkbox is in an indeterminate state\n       */\n      indeterminate = false,\n      ...props\n    }: CheckboxProps,\n    ref\n  ) => (\n    <CheckboxRoot ref={ref} {...props}>\n      <CheckboxIndicator>{indeterminate ? <MinusIcon /> : <CheckIcon />}</CheckboxIndicator>\n    </CheckboxRoot>\n  )\n);\nCheckbox.displayName = \"Checkbox\";\n\nexport { Checkbox };\n"
    }
  ]
}