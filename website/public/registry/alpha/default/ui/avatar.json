{
  "id": "ui/avatar",
  "name": "Avatar",
  "dependencies": [
    "@radix-ui/react-avatar"
  ],
  "files": [
    {
      "path": "ui/avatar.tsx",
      "content": "import * as React from \"react\";\nimport { styled } from \"@pigment-css/react\";\nimport * as Primitives from \"@radix-ui/react-avatar\";\n\ninterface AvatarRootProps extends React.ComponentPropsWithoutRef<typeof Primitives.Root> {\n  size: \"2xs\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n  variant: \"rounded\" | \"squared\";\n}\n\nconst AvatarRoot = styled(Primitives.Root, {\n  name: \"AvatarRoot\",\n  slot: \"root\",\n})<AvatarRootProps>({\n  alignItems: \"center\",\n  backgroundColor: \"hsl(var(--color-muted))\",\n  display: \"flex\",\n  flex: \"0 0 auto\",\n  height: \"var(--avatar-size)\",\n  justifyContent: \"center\",\n  overflow: \"hidden\",\n  width: \"var(--avatar-size)\",\n  variants: [\n    {\n      props: { size: \"2xs\" },\n      style: {\n        \"--avatar-size\": \"calc(var(--size-unit) * 5)\",\n      } as React.CSSProperties,\n    },\n    {\n      props: { size: \"xs\" },\n      style: {\n        \"--avatar-size\": \"calc(var(--size-unit) * 6)\",\n      } as React.CSSProperties,\n    },\n    {\n      props: { size: \"sm\" },\n      style: {\n        \"--avatar-size\": \"calc(var(--size-unit) * 7)\",\n      } as React.CSSProperties,\n    },\n    {\n      props: { size: \"md\" },\n      style: {\n        \"--avatar-size\": \"calc(var(--size-unit) * 8)\",\n      } as React.CSSProperties,\n    },\n    {\n      props: { size: \"lg\" },\n      style: {\n        \"--avatar-size\": \"calc(var(--size-unit) * 10)\",\n      } as React.CSSProperties,\n    },\n    {\n      props: { size: \"xl\" },\n      style: {\n        \"--avatar-size\": \"calc(var(--size-unit) * 12)\",\n      } as React.CSSProperties,\n    },\n    {\n      props: { variant: \"rounded\" },\n      style: {\n        borderRadius: \"var(--borderRadius-full)\",\n      },\n    },\n    {\n      props: { variant: \"squared\" },\n      style: {\n        borderRadius: \"var(--borderRadius-md)\",\n      },\n    },\n  ],\n});\n\nconst AvatarImage = styled(Primitives.Image, {\n  name: \"AvatarImage\",\n  slot: \"image\",\n})({\n  height: \"var(--size-full)\",\n  objectFit: \"cover\",\n  width: \"var(--size-full)\",\n});\n\nconst AvatarFallback = styled(Primitives.Fallback, {\n  name: \"AvatarFallback\",\n  slot: \"fallback\",\n})({\n  alignItems: \"center\",\n  backgroundColor: \"hsl(var(--color-muted))\",\n  color: \"hsl(var(--color-mutedForeground))\",\n  display: \"flex\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"calc(var(--avatar-size) / 2.5)\",\n  height: \"var(--size-full)\",\n  justifyContent: \"center\",\n  width: \"var(--size-full)\",\n});\n\ninterface AvatarProps extends React.ComponentPropsWithoutRef<typeof Primitives.Root> {\n  src?: string;\n  fallback: string;\n  size?: \"2xs\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n  variant?: \"rounded\" | \"squared\";\n}\n\nconst Avatar = React.forwardRef<React.ElementRef<typeof AvatarRoot>, AvatarProps>(\n  ({ src, fallback, size = \"md\", variant = \"rounded\", ...props }: AvatarProps, ref) => (\n    <AvatarRoot ref={ref} size={size} variant={variant} {...props}>\n      {src ? <AvatarImage src={src} /> : <AvatarFallback>{fallback}</AvatarFallback>}\n    </AvatarRoot>\n  )\n);\nAvatar.displayName = \"Avatar\";\n\nexport { Avatar };\n"
    }
  ]
}