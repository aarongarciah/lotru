{
  "id": "ui/badge",
  "name": "Badge",
  "files": [
    {
      "path": "ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { styled } from \"@pigment-css/react\";\n\nconst BadgeRoot = styled(\"span\", {\n  name: \"BadgeRoot\",\n  slot: \"root\",\n})<\n  React.ComponentProps<\"span\"> & {\n    rounded: boolean;\n    size: \"sm\" | \"md\" | \"lg\";\n    variant: \"solid\" | \"subtle\" | \"outline\";\n  }\n>({\n  alignItems: \"center\",\n  boxSizing: \"border-box\",\n  display: \"inline-flex\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontWeight: \"var(--fontWeight-medium)\",\n  gap: \"var(--spacing-unit)\",\n  \"&:focus-visible\": {\n    \"--ring-offset-width\": \"2px\",\n    \"--ring-offset-color\": \"hsl(var(--color-background))\",\n    \"--ring-offset-shadow\": \"0 0 0 var(--ring-offset-width) var(--ring-offset-color)\",\n    \"--ring-width\": \"2px\",\n    \"--ring-color\": \"hsl(var(--color-ring))\",\n    \"--ring-shadow\": \"0 0 0 calc(var(--ring-offset-width) + var(--ring-width)) var(--ring-color)\",\n    boxShadow: \"var(--ring-offset-shadow), var(--ring-shadow), var(--shadow, 0 0 #0000)\",\n    outline: \"none\",\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    opacity: 0.5,\n  },\n  \"& svg\": {\n    flexShrink: 0,\n    fontSize: \"1.1em\",\n    height: \"1.1em\",\n    pointerEvents: \"none\",\n    width: \"1.1em\",\n  },\n  variants: [\n    {\n      props: { variant: \"solid\" },\n      style: {\n        backgroundColor: \"hsl(var(--color-primary))\",\n        color: \"hsl(var(--color-primaryForeground))\",\n      },\n    },\n    {\n      props: { variant: \"subtle\" },\n      style: {\n        backgroundColor: \"hsl(var(--color-muted))\",\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderColor: \"hsl(var(--color-border))\",\n        color: \"hsl(var(--color-foreground))\",\n      },\n    },\n    {\n      props: { variant: \"outline\" },\n      style: {\n        borderWidth: \"2px\",\n        borderStyle: \"solid\",\n        borderColor: \"hsl(var(--color-border))\",\n        color: \"hsl(var(--color-foreground))\",\n      },\n    },\n    {\n      props: { size: \"sm\" },\n      style: {\n        fontSize: \"var(--fontSize-xs)\",\n        height: \"calc(var(--size-unit) * 5)\",\n        paddingInline: \"calc(var(--spacing-unit) * 2)\",\n      },\n    },\n    {\n      props: { size: \"md\" },\n      style: {\n        fontSize: \"var(--fontSize-xs)\",\n        height: \"calc(var(--size-unit) * 6)\",\n        paddingInline: \"calc(var(--spacing-unit) * 2.5)\",\n      },\n    },\n    {\n      props: { size: \"lg\" },\n      style: {\n        fontSize: \"var(--fontSize-sm)\",\n        height: \"calc(var(--size-unit) * 7)\",\n        paddingInline: \"calc(var(--spacing-unit) * 3)\",\n      },\n    },\n    {\n      props: { rounded: false },\n      style: {\n        borderRadius: \"var(--borderRadius-md)\",\n      },\n    },\n    {\n      props: { rounded: true },\n      style: {\n        borderRadius: \"var(--borderRadius-full)\",\n      },\n    },\n  ],\n} as React.CSSProperties);\n\nconst Badge = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\"> & {\n    rounded?: boolean;\n    size?: \"sm\" | \"md\" | \"lg\";\n    variant?: \"solid\" | \"subtle\" | \"outline\";\n  }\n>(\n  (\n    {\n      children,\n      /**\n       * The size of the badge\n       */\n      size = \"md\",\n      /**\n       * The border radius of the badge\n       */\n      rounded = true,\n      /**\n       * The color of the badge\n       */\n      variant = \"solid\",\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <BadgeRoot ref={ref} size={size} rounded={rounded} variant={variant} {...props}>\n        {children}\n      </BadgeRoot>\n    );\n  }\n);\nBadge.displayName = \"Badge\";\n\nexport { Badge };\n"
    }
  ]
}