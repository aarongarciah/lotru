{
  "id": "ui/table",
  "name": "Table",
  "registryDependencies": [
    "ui/button",
    "ui/stack"
  ],
  "files": [
    {
      "path": "ui/table.tsx",
      "content": "import * as React from \"react\";\nimport { styled } from \"@pigment-css/react\";\nimport { MinusIcon } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Stack } from \"@/components/ui/stack\";\n\nconst TableRoot = styled(\"table\", {\n  name: \"TableRoot\",\n  slot: \"root\",\n})<React.ComponentProps<\"table\">>({\n  borderCollapse: \"collapse\",\n  captionSide: \"bottom\",\n  textIndent: 0,\n  width: \"var(--size-full)\",\n});\n\nconst TableHeader = styled(\"thead\", {\n  name: \"TableHeader\",\n  slot: \"header\",\n})<React.ComponentProps<\"thead\">>({});\n\nconst TableBody = styled(\"tbody\", {\n  name: \"TableBody\",\n  slot: \"body\",\n})<React.ComponentProps<\"tbody\">>({\n  \"& > tr:last-child\": {\n    borderBlockEnd: \"none\",\n  },\n});\n\nconst TableFooter = styled(\"tfoot\", {\n  name: \"TableFooter\",\n  slot: \"footer\",\n})<React.ComponentProps<\"tfoot\">>({\n  backgroundColor: \"hsl(var(--color-muted) / 50%)\",\n  borderBlockStart: \"1px solid hsl(var(--color-border))\",\n  fontWeight: \"var(--fontWeight-medium)\",\n  \"&:last-child > tr\": {\n    borderBlockEnd: \"none\",\n  },\n});\n\nconst TableCaption = styled(\"caption\", {\n  name: \"TableCaption\",\n  slot: \"caption\",\n})<React.ComponentProps<\"caption\">>({\n  color: \"hsl(var(--color-mutedForeground))\",\n  fontSize: \"var(--fontSize-sm)\",\n  padding: \"calc(var(--spacing-unit) * 4)\",\n  textAlign: \"center\",\n  verticalAlign: \"middle\",\n});\n\nconst TableRow = styled(\"tr\", {\n  name: \"TableRow\",\n  slot: \"row\",\n})<React.ComponentProps<\"tr\">>({\n  borderBlockEnd: \"1px solid hsl(var(--color-border))\",\n  \"&:hover\": {\n    backgroundColor: \"hsl(var(--color-muted) / 50%)\",\n  },\n});\n\nconst TableHeaderCell = styled(\"th\", {\n  name: \"TableHeaderCell\",\n  slot: \"headerCell\",\n})<React.ComponentProps<\"th\">>({\n  color: \"hsl(var(--color-mutedForeground))\",\n  fontSize: \"var(--fontSize-sm)\",\n  fontWeight: \"var(--fontWeight-medium)\",\n  height: \"calc(var(--spacing-unit) * 12)\",\n  paddingInline: \"calc(var(--spacing-unit) * 4)\",\n  textAlign: \"start\",\n  verticalAlign: \"middle\",\n});\n\nconst TableCell = styled(\"td\", {\n  name: \"TableCell\",\n  slot: \"cell\",\n})<React.ComponentProps<\"td\">>({\n  fontSize: \"var(--fontSize-sm)\",\n  padding: \"calc(var(--spacing-unit) * 4)\",\n  textAlign: \"start\",\n  verticalAlign: \"middle\",\n});\n\nconst Table = (props: React.ComponentProps<\"table\">) => <TableRoot {...props} />;\nTable.displayName = \"Table\";\n\nconst TablePagination = ({\n  /**\n   * The total number of items.\n   */\n  count,\n  /**\n   * The number of items per page.\n   */\n  pageSize,\n  /**\n   * The total number of pages.\n   */\n  pageCount,\n  /**\n   * The current page index.\n   */\n  pageIndex,\n  /**\n   * Whether there's a previous page that can be navigated to.\n   */\n  canPreviousPage,\n  /**\n   * Whether there's a next page that can be navigated to.\n   */\n  canNextPage,\n  /**\n   * A function that handles navigating to the next page.\n   * This function should handle retrieving data for the next page.\n   */\n  onNextPage,\n  /**\n   * A function that handles navigating to the previous page.\n   * This function should handle retrieving data for the previous page.\n   */\n  onPreviousPage,\n  /**\n   * An optional object of words to use in the pagination component.\n   * Use this to override the default words, or translate them into another language.\n   */\n  translations = {\n    of: \"of\",\n    results: \"results\",\n    pages: \"pages\",\n    prev: \"Prev\",\n    next: \"Next\",\n  },\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & {\n  count: number;\n  pageSize: number;\n  pageIndex: number;\n  pageCount: number;\n  canPreviousPage: boolean;\n  canNextPage: boolean;\n  translations?: {\n    of?: string;\n    results?: string;\n    pages?: string;\n    prev?: string;\n    next?: string;\n  };\n  onPreviousPage: () => void;\n  onNextPage: () => void;\n}) => {\n  const { from, to } = React.useMemo(() => {\n    const from = count === 0 ? count : pageIndex * pageSize + 1;\n    const to = Math.min(count, (pageIndex + 1) * pageSize);\n\n    return { from, to };\n  }, [count, pageIndex, pageSize]);\n\n  return (\n    <div {...props}>\n      <Stack alignItems=\"center\" direction=\"row\" gap={1}>\n        <span>{from}</span>\n        <MinusIcon />\n        <span>\n          {to} {translations.of} {count} {translations.results}\n        </span>\n      </Stack>\n      <Stack alignItems=\"center\" gap={2}>\n        <span>\n          {pageIndex + 1} {translations.of} {Math.max(pageCount, 1)} {translations.pages}\n        </span>\n        <Button variant=\"ghost\" onClick={onPreviousPage} disabled={!canPreviousPage}>\n          {translations.prev}\n        </Button>\n        <Button variant=\"ghost\" onClick={onNextPage} disabled={!canNextPage}>\n          {translations.next}\n        </Button>\n      </Stack>\n    </div>\n  );\n};\nTablePagination.displayName = \"TablePagination\";\n\nexport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFooter,\n  TableHeader,\n  TableHeaderCell,\n  TablePagination,\n  TableRow,\n};\n"
    }
  ]
}