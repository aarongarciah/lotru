{
  "id": "ui/table",
  "name": "Table",
  "files": [
    {
      "path": "ui/table.tsx",
      "content": "import * as React from \"react\";\nimport { styled } from \"@pigment-css/react\";\nimport { MinusIcon } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Stack } from \"@/components/ui/stack\";\nimport { Text } from \"@/components/ui/text\";\n\nconst TableRoot = styled(\"table\", {\n  name: \"Table\",\n  slot: \"root\",\n})({\n  borderCollapse: \"collapse\",\n  width: \"var(--size-full)\",\n});\n\nconst TableHeader = styled(\"thead\", {\n  name: \"TableHeader\",\n  slot: \"header\",\n})({\n  backgroundColor: \"hsl(var(--color-muted))\",\n});\n\nconst TableBody = styled(\"tbody\", {\n  name: \"TableBody\",\n  slot: \"body\",\n})({});\n\nconst TableRow = styled(\"tr\", {\n  name: \"TableRow\",\n  slot: \"row\",\n})({\n  borderBottom: \"1px solid hsl(var(--color-border))\",\n  \"&:last-child\": {\n    borderBottom: \"none\",\n  },\n});\n\nconst TableCell = styled(\"td\", {\n  name: \"TableCell\",\n  slot: \"cell\",\n})({\n  color: \"hsl(var(--color-mutedForeground))\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-sm)\",\n  height: \"calc(var(--spacing-unit) * 12)\",\n  paddingInlineStart: \"calc(var(--spacing-unit) * 2)\",\n  paddingBlockEnd: \"1px\",\n  paddingBlockStart: \"1px\",\n  textAlign: \"left\",\n  verticalAlign: \"middle\",\n  \"&:first-child\": {\n    paddingLeft: \"calc(var(--spacing-unit) * 6)\",\n  },\n});\n\nconst TableHeaderCell = styled(TableCell, {\n  name: \"TableHeaderCell\",\n  slot: \"headerCell\",\n})({\n  color: \"hsl(var(--color-foreground))\",\n  fontFamily: \"var(--fontFamily-sans)\",\n  fontSize: \"var(--fontSize-sm)\",\n  fontWeight: \"var(--fontWeight-medium)\",\n  height: \"calc(var(--spacing-unit) * 12)\",\n});\n\ninterface TableProps extends React.ComponentPropsWithoutRef<\"table\"> {}\n\nconst Table = React.forwardRef<HTMLTableElement, TableProps>(({ children, ...props }: TableProps, ref) => {\n  return (\n    <TableRoot ref={ref} {...props}>\n      {children}\n    </TableRoot>\n  );\n});\n\ninterface TablePaginationProps extends React.HTMLAttributes<HTMLDivElement> {\n  count: number;\n  pageSize: number;\n  pageIndex: number;\n  pageCount: number;\n  canPreviousPage: boolean;\n  canNextPage: boolean;\n  translations?: {\n    of?: string;\n    results?: string;\n    pages?: string;\n    prev?: string;\n    next?: string;\n  };\n  previousPage: () => void;\n  nextPage: () => void;\n}\n\nconst TablePagination = React.forwardRef<HTMLDivElement, TablePaginationProps>(\n  (\n    {\n      className,\n      /**\n       * The total number of items.\n       */\n      count,\n      /**\n       * The number of items per page.\n       */\n      pageSize,\n      /**\n       * The total number of pages.\n       */\n      pageCount,\n      /**\n       * The current page index.\n       */\n      pageIndex,\n      /**\n       * Whether there's a previous page that can be navigated to.\n       */\n      canPreviousPage,\n      /**\n       * Whether there's a next page that can be navigated to.\n       */\n      canNextPage,\n      /**\n       * A function that handles navigating to the next page.\n       * This function should handle retrieving data for the next page.\n       */\n      nextPage,\n      /**\n       * A function that handles navigating to the previous page.\n       * This function should handle retrieving data for the previous page.\n       */\n      previousPage,\n      /**\n       * An optional object of words to use in the pagination component.\n       * Use this to override the default words, or translate them into another language.\n       */\n      translations = {\n        of: \"of\",\n        results: \"results\",\n        pages: \"pages\",\n        prev: \"Prev\",\n        next: \"Next\",\n      },\n      ...props\n    }: TablePaginationProps,\n    ref\n  ) => {\n    const { from, to } = React.useMemo(() => {\n      const from = count === 0 ? count : pageIndex * pageSize + 1;\n      const to = Math.min(count, (pageIndex + 1) * pageSize);\n\n      return { from, to };\n    }, [count, pageIndex, pageSize]);\n\n    return (\n      <div ref={ref} className={className} {...props}>\n        <Stack alignItems=\"center\" direction=\"row\" gap={1}>\n          <Text>{from}</Text>\n          <MinusIcon />\n          <Text>\n            {to} {translations.of} {count} {translations.results}\n          </Text>\n        </Stack>\n        <Stack alignItems=\"center\" gap={2}>\n          <Text>\n            {pageIndex + 1} {translations.of} {Math.max(pageCount, 1)} {translations.pages}\n          </Text>\n          <Button variant=\"ghost\" onClick={previousPage} disabled={!canPreviousPage}>\n            {translations.prev}\n          </Button>\n          <Button variant=\"ghost\" onClick={nextPage} disabled={!canNextPage}>\n            {translations.next}\n          </Button>\n        </Stack>\n      </div>\n    );\n  }\n);\n\nexport { Table, TableHeader, TableBody, TableRow, TableCell, TableHeaderCell, TablePagination };\n\nexport type { TableProps, TablePaginationProps };\n"
    }
  ]
}